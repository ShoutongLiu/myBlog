(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{464:function(t,s,a){t.exports=a.p+"assets/img/mengbi.41136a9b.jpg"},465:function(t,s,a){t.exports=a.p+"assets/img/01.9aa6bae5.png"},466:function(t,s,a){t.exports=a.p+"assets/img/02.95aad7db.png"},467:function(t,s,a){t.exports=a.p+"assets/img/03.e4cd4e5e.png"},468:function(t,s,a){t.exports=a.p+"assets/img/04.66fabd33.png"},469:function(t,s,a){t.exports=a.p+"assets/img/05.e92681bc.png"},470:function(t,s,a){t.exports=a.p+"assets/img/06.a1e40328.png"},471:function(t,s,a){t.exports=a.p+"assets/img/111.1b3eee38.png"},514:function(t,s,a){"use strict";a.r(s);var n=a(1),e=Object(n.a)({},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h2",{attrs:{id:"前言"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#前言","aria-hidden":"true"}},[t._v("#")]),t._v(" 前言")]),t._v(" "),n("p",[t._v("前段时间离职了，裸辞的那种，然后马不停蹄的就开始投简历，面试，在面试中被问到你能说一下原型和原型链吗或者是你能画一下原型链图吗的问题，当时我的表情是这样的，")]),t._v(" "),n("img",{attrs:{src:a(464),width:"200",alt:"mengbi",align:"center",title:"mengbi"}}),t._v(" "),n("p",[t._v("然后只能凭着自己仅有的一点点记忆画了一下图，最后还是说这个我没有理解到位！唉，心里面一万个后悔没有好好研究一下原型。所以就有了这篇文章，希望通过自己的记录，加深自己的理解，也希望看过的人能够把这个知识点理解清楚。")]),t._v(" "),n("h2",{attrs:{id:"对象"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#对象","aria-hidden":"true"}},[t._v("#")]),t._v(" 对象")]),t._v(" "),n("p",[t._v("对象分为普通对象和函数对象")]),t._v(" "),n("h3",{attrs:{id:"普通对象"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#普通对象","aria-hidden":"true"}},[t._v("#")]),t._v(" 普通对象")]),t._v(" "),n("ul",[n("li",[t._v("最普通的对象：具有_proto_属性并指向原型链，没有prototype属性。")]),t._v(" "),n("li",[t._v("原型对象：person.prototype，原型对象还有constructor属性并指向构造函数对象")])]),t._v(" "),n("h3",{attrs:{id:"函数对象"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#函数对象","aria-hidden":"true"}},[t._v("#")]),t._v(" 函数对象")]),t._v(" "),n("ul",[n("li",[t._v("通过new Function()创建的都是函数对象。有_proto_,prototype属性。")])]),t._v(" "),n("h2",{attrs:{id:"原型对象"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#原型对象","aria-hidden":"true"}},[t._v("#")]),t._v(" 原型对象")]),t._v(" "),n("p",[t._v("每创建一个函数，这个函数下都会有一个prototype属性，这个属性指向的对象就是原型对象。例如我们创建一个构造函数Person()，我们实例化一个对象p1，这个p1对象可以访问Person.prototype下的属性，所以原型对象也是构造函数的一个实例对象，相当于创建构造函数Perosn()的时候创建了一个实例，并把这个实例赋值给了prototype。")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Person")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("name")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("   "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 创建Perosn() 构造函数")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" name\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("say")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 在原型对象添加方法say()")]),t._v("\n    console"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" p1 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'桐先生'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("   "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 实例化对象p1")]),t._v("\np1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("say")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("   "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 桐先生")]),t._v("\nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("p1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__proto__"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("   "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// {say: ƒ, constructor: ƒ}")]),t._v("\nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" p1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__proto__"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n")])])]),n("p",[t._v("我们知道p1是实例化对象，也就是一个普通的对象，有__proto__属性并指向原型链，所以我们打印p1.__proto__可以看到是一个对象，里面有我们之前在Person.prototype中添加的say()方法。接着我们打印Person.prototype === p1.__proto__结果是true，说明他们指向的是同一个对象。")]),t._v(" "),n("h2",{attrs:{id:"原型链"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#原型链","aria-hidden":"true"}},[t._v("#")]),t._v(" 原型链")]),t._v(" "),n("p",[t._v("我们知道__proto__ 是每个对象都有的属性，prototype是构造函数的属性，他们指向的是同一个对象。所以接着上面的例子我们打印：")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[t._v("console"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("p1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__proto__"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__proto__"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// {constructor: ƒ, __defineGetter__: ƒ, __defineSetter__: ƒ, hasOwnProperty: ƒ, __lookupGetter__: ƒ, …}")]),t._v("\n")])])]),n("p",[t._v("打印结果是一个对象，那它也必有__proto__属性，所以我们继续打印：")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[t._v("console"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("p1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__proto__"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__proto__"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__proto__"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("   "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//null")]),t._v("\n")])])]),n("p",[t._v("打印结果是null，由此我们可以总结访问一个对象的属性时，如果对象内不存在这个属性，那么就会访问__proto__属性，如果还是找不到，就再继访问__proto__属性继续找，直到null为止。这样由原型形成的链式结构就称为原型链。接下来我们用画图的方式一步一步理解原型链。")]),t._v(" "),n("p",[t._v("之前提到每个函数都有prototype属性，所以")]),t._v(" "),n("p",[n("img",{attrs:{src:a(465),alt:""}})]),t._v(" "),n("p",[t._v("在Person.prototype下有个constructor方法，我们尝试的输出它：")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[t._v("console"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("constructor"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("   "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//  Person(name) {this.name = name}")]),t._v("\n")])])]),n("p",[t._v("打印结果是Person()函数，说明原型的constructor是指向这个函数本身的，所以")]),t._v(" "),n("p",[n("img",{attrs:{src:a(466),alt:""}})]),t._v(" "),n("p",[t._v("我们实例化对象p1也是能访问到原型对象的，所以有")]),t._v(" "),n("p",[n("img",{attrs:{src:a(467),alt:""}})]),t._v(" "),n("p",[t._v("Person.prototype指向的是原型对象，每个对象也有一个__proto__属性，那这两个是不是指向同一个对象的呢？")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" obj "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__proto__ "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" obj"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__proto__"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("   "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//true")]),t._v("\n")])])]),n("p",[t._v("结果是true，说明这两个指向的是同一个对象，即指向的是Object.prototype，所以打印")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[t._v("console"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__proto__ "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("   "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n")])])]),n("p",[t._v("结果是true，所以有")]),t._v(" "),n("p",[n("img",{attrs:{src:a(468),alt:""}})]),t._v(" "),n("p",[t._v("之前我们验证过p1."),n("strong",[t._v("proto")]),t._v("."),n("strong",[t._v("proto")]),t._v(".__proto__结果是null，也就是Object.prototype.__proto__结果为null，所以")]),t._v(" "),n("p",[n("img",{attrs:{src:a(469),alt:""}})]),t._v(" "),n("p",[t._v("我们看到Object.prototype下也有constructor方法，那么应该也是指向一个构造函数。所以打印")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[t._v("console"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("constructor"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Object() { [native code] }")]),t._v("\n")])])]),n("p",[t._v("结果是一个Object()的函数，所以有")]),t._v(" "),n("p",[n("img",{attrs:{src:a(470),alt:""}})]),t._v(" "),n("p",[t._v("到这基本整个原型链就出来了，也许你会觉得怎么跟我在其他地方看到的不一样，确实在很多文章中可以看到下面这张很经典的图：")]),t._v(" "),n("p",[n("img",{attrs:{src:a(471),alt:""}})]),t._v(" "),n("p",[t._v("我觉得能理解到这，后面的都可以自己尝试着打印去理解，毕竟分析的js原型的文章已经很多了。")]),t._v(" "),n("h2",{attrs:{id:"总结"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#总结","aria-hidden":"true"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),n("p",[t._v("js原型及原型链的知识点还是很重要的，虽然平时用的少，但是面试的时候确实是经常被问到的，而且确实也能看出你的js基础怎么样，所以这块的知识还是要重视的。以上是我自己对js原型及原型链的简单分析和理解，如果有些地方分析的不到位，还请留言指出，感谢阅读。")]),t._v(" "),n("Vssue",{attrs:{title:"Vssue js"}})],1)},[],!1,null,null,null);s.default=e.exports}}]);